<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Next.js on Han</title>
    <link>http://localhost:1313/tags/next.js/</link>
    <description>Recent content in Next.js on Han</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Oct 2024 00:00:01 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/next.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Next.js 的 Dynamic Routes 來處理多層結構的頁面</title>
      <link>http://localhost:1313/posts/use-slug-for-dynamic-routes/</link>
      <pubDate>Sat, 05 Oct 2024 00:00:01 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/use-slug-for-dynamic-routes/</guid>
      <description>&lt;p&gt;實作「常見問題」頁面的時候，常見問題可能會是多層結構&lt;/p&gt;
&lt;p&gt;以&lt;a href=&#34;https://support.rhinoshield.io/hc/zh-tw/&#34; target=&#34;_blank&#34;&gt;犀牛盾的常見問題頁&lt;/a&gt;
來說：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最外層是 Categories：iPhone 16 專區｜產品使用｜訂單常見問題｜會員常見問題 &amp;hellip;&lt;/li&gt;
&lt;li&gt;點擊任何一個 Category 後，會看到該 Category 對應到的 Sections&lt;/li&gt;
&lt;li&gt;再點擊任一個 Section 後，會看到該 Section 對應到的 Articles&lt;/li&gt;
&lt;li&gt;點擊任一個 Article，會進入特定的文章頁面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最近接觸到的常見問題頁，在點擊切換 Category/Section/Article 時，網址是不會有變化的，而是透過 state 來控制當前顯示的 component&lt;/p&gt;
&lt;p&gt;隨著需求改變，希望可以調整成 Category/Section/Article 都能夠有自己的相對應網址，這樣客服在回答問題時，可以直接將網址傳給對方、或是在某些頁面將用戶導到相對應的文章網址，用戶就不用自己從入口開始漫無目的的尋找。&lt;/p&gt;
&lt;p&gt;專案是使用 next.js page router，所以我最直接的想法就是建新的資料夾來設定對應的 page&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pages/
└── rhinoshield/
    ├── faq/
    │   ├── index.tsx                =&amp;gt; /rhinoshield/faq
    │   ├── [categoryId]/
    │   │   ├── index.tsx            =&amp;gt; /rhinoshield/faq/[categoryId]
    │   │   └── [sectionId]/
    │   │       └── index.tsx        =&amp;gt; /rhinoshield/faq/[categoryId]/[sectionId]
    │   │       └── [articleId]/
    │   │           └── index.tsx    =&amp;gt; /rhinoshield/faq/[categoryId]/[sectionId]/[articleId]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後都吃同一個 component，所以等於寫了好幾次重複的東西，只為了單獨設定 page&lt;/p&gt;
&lt;p&gt;同事提供給我一個 next.js 的 &lt;a href=&#34;https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes&#34; target=&#34;_blank&#34;&gt;Dynamic Routes&lt;/a&gt;
 的 Optional Catch-all Segments&lt;/p&gt;
&lt;p&gt;之前我使用過的 dynamic routes 是像 &lt;code&gt;[id]&lt;/code&gt; 這種，這個方式讓 &lt;code&gt;/a&lt;/code&gt;、&lt;code&gt;/b&lt;/code&gt;、&lt;code&gt;/123&lt;/code&gt; 等都包含在裡面，透過 &lt;code&gt;router.query&lt;/code&gt; 就能取得 &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;123&lt;/code&gt; 這些值。&lt;/p&gt;
&lt;p&gt;如果需要更多 query，可以使用 &lt;code&gt;[...slug]&lt;/code&gt;，如下面這張圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/use-slug-for-dynamic-routes-1.png&#34; alt=&#34;nextjs-dynamic-routes&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上面這個例子來說，如果需要讓 &lt;code&gt;/shop&lt;/code&gt; 也在這個可能裡面呢？就可以使用 &lt;code&gt;[[...slug]]&lt;/code&gt;（Optional Catch-all Segments）&lt;/p&gt;
&lt;p&gt;使用這個方式，不用新增過多 page folder，就可以更好的達成我想要的結果，根據我的需求，我將資料夾結構調整成以下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pages/
└── rhinoshield/
    ├── faq/
    │   ├── [[...slug]].tsx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;調整成這樣之後，以下網址都會 render &lt;code&gt;[[...slug]].tsx&lt;/code&gt; 裡面的 component&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/rhinoshield/faq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/rhinoshield/faq/123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/rhinoshield/faq/123/123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/rhinoshield/faq/123/123/123&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過這個的小缺點是允許被無限增長的，想要限制 query 的量的話需要靠自己來 handle，我自己是在 &lt;code&gt;[[...slug]].tsx&lt;/code&gt; 內再去判斷 &lt;code&gt;slug&lt;/code&gt; 長度是否大於 3，如果是的話則 return 404 page。&lt;/p&gt;
&lt;p&gt;拿取 slug 的方式，我目前是透過 &lt;code&gt;getServerSideProps&lt;/code&gt; 取得 slug 後傳給 component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getServerSideProps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;slug&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（感覺寫得很茫，太想睡了但還是要來日更！今天先發出來，日後再來回顧要怎麼修改可以更好）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
